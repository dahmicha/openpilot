define connect
	file ./build/px2io/px2io.elf
	target remote localhost:3333
	monitor cortex_m3 vector_catch all
end
#monitor reset halt

# mask interrupts while single-stepping
define hook-step
	monitor cortex_m3 maskisr on
end
define hookpost-step
	monitor cortex_m3 maskisr off
end

define hook-stepi
	monitor cortex_m3 maskisr on
end

define hookpost-stepi
	monitor cortex_m3 maskisr off
end

define hook-next
	monitor cortex_m3 maskisr on
end

define hookpost-next
	monitor cortex_m3 maskisr off
end

define hook-finish
	monitor cortex_m3 maskisr on
end

define hookpost-finish
	monitor cortex_m3 maskisr off
end

# FreeRTOS macros
define showtask
       set $tcb = (struct tskTaskControlBlock*)$arg0
       printf "  0x%08x %s\n", $tcb, $tcb->pcTaskName
end

define vecstate
       set $icsr = *(uint32_t *)0xe000ed04
       printf "vectactive %d  vectpending %d  isrpending %d\n", $icsr & 0xff, ($icsr >> 12) & 0xff, ($icsr >> 22) & 1
       set $hfsr = *(uint32_t *)0xe000ed2c
       printf "hardfault 0x%08 xforced %d  vector read error %d\n", $hfsr, ($hfsr >> 30) & 1, ($hfsr >> 1) & 1
       set $cfsr = *(uint32_t *)0xE000ED28
       set $ufsr = ($cfsr >> 16) & 0xffff
       set $bfsr = ($cfsr >> 8) & 0xff
       printf "usefault 0x%08x undef %d  align %d  divzero %d\n", $ufsr, $ufsr & 1, ($ufsr >> 8) & 1, ($ufsr >> 9) & 1
       set $bfar = *(uint32_t *)0xe000ed38
       printf "busfault 0x%08x prefetch %d  data %d  stack %d\n", $bfsr & 1, ($bfsr >> 1) & 3, ($bfsr >> 3) & 3
       if $bfsr & 0x80
       	  printf "busfault addr 0x%08x\n", $bfar
       end
end

define showtasklist
	set $list = (struct xLIST *)$arg0
	set $entry = $list->xListEnd.pxNext

	while $entry != &$list->xListEnd
       		showtask $entry->pvOwner
		set $entry = $entry->pxNext
	end
end

define showtasks
	set $priority = sizeof(pxReadyTasksLists) / sizeof(pxReadyTasksLists[0])
	while $priority > 0
		set $priority = $priority - 1
		printf "ready - %d:\n", $priority
		showtasklist &pxReadyTasksLists[$priority]
	end
	printf "ready - pending:\n"
	showtasklist &xPendingReadyList
	printf "delayed:\n"
	showtasklist pxDelayedTaskList
	showtasklist pxOverflowDelayedTaskList
	printf "suspended:\n"
	showtasklist &xSuspendedTaskList
	printf "waiting termination:\n"
	showtasklist &xTasksWaitingTermination
	
end
